#!/bin/bash

# Strict error handling
set -euo pipefail
IFS=$'\n\t'

# Parse command line arguments
BUMP_TYPE="patch"

while [[ $# -gt 0 ]]; do
    case $1 in
        --major)
            BUMP_TYPE="major"
            shift
            ;;
        --minor)
            BUMP_TYPE="minor"
            shift
            ;;
        --patch)
            BUMP_TYPE="patch"
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo "Usage: $0 [--major|--minor|--patch]"
            exit 1
            ;;
    esac
done

# Read current version from Cargo.toml
CURRENT_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
if [ -z "$CURRENT_VERSION" ]; then
    echo "Failed to determine current version from Cargo.toml"
    exit 1
fi

# Split version into components
IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

# Bump version according to type
case $BUMP_TYPE in
    major)
        NEW_VERSION="$((MAJOR + 1)).0.0"
        ;;
    minor)
        NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
        ;;
    patch)
        NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
        ;;
esac

# Update version in Cargo.toml using perl
perl -i -pe "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml

# Verify the update was successful
NEW_VERSION_CHECK=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
if [ "$NEW_VERSION_CHECK" != "$NEW_VERSION" ]; then
    echo "Failed to update version in Cargo.toml"
    exit 1
fi

echo "Version bumped from $CURRENT_VERSION to $NEW_VERSION"
